angular.module('wd.parse', [])
.factory('parser', [function() { 
    var parser = buildParser();

    return { 
        parseLog: parseLog
    };

    /// START PUBLIC
    function parseLog(log) { 
        var parsed = [];

        for(var i = 0; i < log.length; i++) { 
            var action = log[i];
            var parsedAction = "";
            try { 
                // start of round lines are an example of comment lines
                if(action.commands != undefined) {
                    parsedAction = parser.parse(action.commands);
                } else if(action.comment != undefined) { 
                    parsedAction = parser.parse(action.comment);
                }
            }
            catch(err) { 
                parsedAction = {
                    "err": err,
                    "action": action
                }
            }
            parsed.push(parsedAction);

        }

        return parsed;
    }
    /// END PUBLIC



    /// START GENERATED BY PEGJS (with a few small tweaks, see: parser_README)
    function buildParser() {
      "use strict";

      /*
       * Generated by PEG.js 0.9.0.
       *
       * http://pegjs.org/
       */

      function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }

      function peg$SyntaxError(message, expected, found, location) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.location = location;
        this.name     = "SyntaxError";

        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }

      peg$subclass(peg$SyntaxError, Error);

      function peg$parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},
            parser  = this,

            peg$FAILED = {},

            peg$startRuleFunctions = { Turn: peg$parseTurn },
            peg$startRuleFunction  = peg$parseTurn,

            peg$c0 = function(actions) { return makeAction(actions); },
            peg$c1 = "send",
            peg$c2 = { type: "literal", value: "send", description: "\"send\"" },
            peg$c3 = "p",
            peg$c4 = { type: "literal", value: "p", description: "\"p\"" },
            peg$c5 = "to",
            peg$c6 = { type: "literal", value: "to", description: "\"to\"" },
            peg$c7 = ".",
            peg$c8 = { type: "literal", value: ".", description: "\".\"" },
            peg$c9 = function(cult, amount) { return priestToCult(cult, amount) },
            peg$c10 = "for",
            peg$c11 = { type: "literal", value: "for", description: "\"for\"" },
            peg$c12 = function(amount) { return amount; },
            peg$c13 = function() { return 2 },
            peg$c14 = "build",
            peg$c15 = { type: "literal", value: "build", description: "\"build\"" },
            peg$c16 = function(space) { return build(space) },
            peg$c17 = "upgrade",
            peg$c18 = { type: "literal", value: "upgrade", description: "\"upgrade\"" },
            peg$c19 = function(space, building) { return upgrade(building, space) },
            peg$c20 = "pass",
            peg$c21 = { type: "literal", value: "pass", description: "\"pass\"" },
            peg$c22 = function(bonus) { return pass(bonus) },
            peg$c23 = function() { return pass("end") },
            peg$c24 = "action",
            peg$c25 = { type: "literal", value: "action", description: "\"action\"" },
            peg$c26 = function(act) { return action(act); },
            peg$c27 = "leech",
            peg$c28 = { type: "literal", value: "leech", description: "\"leech\"" },
            peg$c29 = "from",
            peg$c30 = { type: "literal", value: "from", description: "\"from\"" },
            peg$c31 = function(amount, faction) { return leech(true, amount, faction) },
            peg$c32 = "decline",
            peg$c33 = { type: "literal", value: "decline", description: "\"decline\"" },
            peg$c34 = function(amount, faction) { return leech(false, amount, faction) },
            peg$c35 = function(amount) { return leech(true, amount); },
            peg$c36 = function(amount) { return leech(false, amount); },
            peg$c37 = "advance",
            peg$c38 = { type: "literal", value: "advance", description: "\"advance\"" },
            peg$c39 = function(track) { return advance(track); },
            peg$c40 = "wait",
            peg$c41 = { type: "literal", value: "wait", description: "\"wait\"" },
            peg$c42 = function() { return wait(); },
            peg$c43 = "done",
            peg$c44 = { type: "literal", value: "done", description: "\"done\"" },
            peg$c45 = function() {return done(); },
            peg$c46 = "setup",
            peg$c47 = { type: "literal", value: "setup", description: "\"setup\"" },
            peg$c48 = function() { return factionSetup() },
            peg$c49 = "default game options",
            peg$c50 = { type: "literal", value: "default game options", description: "\"default game options\"" },
            peg$c51 = function() { return gameStart(); },
            peg$c52 = "option",
            peg$c53 = { type: "literal", value: "option", description: "\"option\"" },
            peg$c54 = function(opt) { return optionSetup(opt); },
            peg$c55 = "round",
            peg$c56 = { type: "literal", value: "round", description: "\"round\"" },
            peg$c57 = "scoring:",
            peg$c58 = { type: "literal", value: "scoring:", description: "\"scoring:\"" },
            peg$c59 = ",",
            peg$c60 = { type: "literal", value: ",", description: "\",\"" },
            peg$c61 = ">>",
            peg$c62 = { type: "literal", value: ">>", description: "\">>\"" },
            peg$c63 = function(roundNum, roundTile, goal, points) { return roundSetup(roundNum, roundTile, goal, points); },
            peg$c64 = "removing tile ",
            peg$c65 = { type: "literal", value: "removing tile ", description: "\"removing tile \"" },
            peg$c66 = function(bonusTile) { return bonusSetup(bonusTile); },
            peg$c67 = "player ",
            peg$c68 = { type: "literal", value: "Player ", description: "\"Player \"" },
            peg$c69 = ": ",
            peg$c70 = { type: "literal", value: ": ", description: "\": \"" },
            peg$c71 = function(playerNum, playerName) { return playerSetup(playerName, playerNum); },
            peg$c72 = "added final scoring tile: ",
            peg$c73 = { type: "literal", value: "added final scoring tile: ", description: "\"added final scoring tile: \"" },
            peg$c74 = function(scoringTile) { return additionalScoringSetup(scoringTile); },
            peg$c75 = "round ",
            peg$c76 = { type: "literal", value: "Round ", description: "\"Round \"" },
            peg$c77 = " income",
            peg$c78 = { type: "literal", value: " income", description: "\" income\"" },
            peg$c79 = function(roundNum) { return roundStart(roundNum) },
            peg$c80 = "other_income_for_faction",
            peg$c81 = { type: "literal", value: "other_income_for_faction", description: "\"other_income_for_faction\"" },
            peg$c82 = function() { return income("base"); },
            peg$c83 = "cult_income_for_faction",
            peg$c84 = { type: "literal", value: "cult_income_for_faction", description: "\"cult_income_for_faction\"" },
            peg$c85 = function() { return income("cult"); },
            peg$c86 = "+",
            peg$c87 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c88 = "vp for ",
            peg$c89 = { type: "literal", value: "vp for ", description: "\"vp for \"" },
            peg$c90 = function(points, source) { return endGamePoints(source, points); },
            peg$c91 = "score_resources",
            peg$c92 = { type: "literal", value: "score_resources", description: "\"score_resources\"" },
            peg$c93 = function() { return endGamePoints("resources", 0); },
            peg$c94 = "convert",
            peg$c95 = { type: "literal", value: "convert", description: "\"convert\"" },
            peg$c96 = function(from, to) { return convert(from, to) },
            peg$c97 = function(quantity, res) { return resource(res, quantity) },
            peg$c98 = function(res) { return resource(res, 1) },
            peg$c99 = "+tw",
            peg$c100 = { type: "literal", value: "+tw", description: "\"+tw\"" },
            peg$c101 = function(num) { return town(num) },
            peg$c102 = "tw",
            peg$c103 = { type: "literal", value: "tw", description: "\"tw\"" },
            peg$c104 = function(count, num) { return town(num, count); },
            peg$c105 = "+fav",
            peg$c106 = { type: "literal", value: "+fav", description: "\"+fav\"" },
            peg$c107 = function(num) { return favor(num) },
            peg$c108 = "dig",
            peg$c109 = { type: "literal", value: "dig", description: "\"dig\"" },
            peg$c110 = function(amount) { return dig(amount); },
            peg$c111 = "+fire",
            peg$c112 = { type: "literal", value: "+fire", description: "\"+fire\"" },
            peg$c113 = function() { return cult("fire", 1); },
            peg$c114 = "+water",
            peg$c115 = { type: "literal", value: "+water", description: "\"+water\"" },
            peg$c116 = function() { return cult("water", 1); },
            peg$c117 = "+earth",
            peg$c118 = { type: "literal", value: "+earth", description: "\"+earth\"" },
            peg$c119 = function() { return cult("earth", 1); },
            peg$c120 = "+air",
            peg$c121 = { type: "literal", value: "+air", description: "\"+air\"" },
            peg$c122 = function() { return cult("air", 1); },
            peg$c123 = "fire",
            peg$c124 = { type: "literal", value: "fire", description: "\"fire\"" },
            peg$c125 = function(amount) { return cult("fire", amount); },
            peg$c126 = "water",
            peg$c127 = { type: "literal", value: "water", description: "\"water\"" },
            peg$c128 = function(amount) { return cult("water", amount); },
            peg$c129 = "earth",
            peg$c130 = { type: "literal", value: "earth", description: "\"earth\"" },
            peg$c131 = function(amount) { return cult("earth", amount); },
            peg$c132 = "air",
            peg$c133 = { type: "literal", value: "air", description: "\"air\"" },
            peg$c134 = function(amount) { return cult("air", amount); },
            peg$c135 = "-fire",
            peg$c136 = { type: "literal", value: "-fire", description: "\"-fire\"" },
            peg$c137 = function() { return cult("fire", -1); },
            peg$c138 = "-water",
            peg$c139 = { type: "literal", value: "-water", description: "\"-water\"" },
            peg$c140 = function() { return cult("water", -1); },
            peg$c141 = "-earth",
            peg$c142 = { type: "literal", value: "-earth", description: "\"-earth\"" },
            peg$c143 = function() { return cult("earth", -1); },
            peg$c144 = "-air",
            peg$c145 = { type: "literal", value: "-air", description: "\"-air\"" },
            peg$c146 = function() { return cult("air", -1); },
            peg$c147 = "-",
            peg$c148 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c149 = function(amount) { return cult("fire", -1 * amount); },
            peg$c150 = function(amount) { return cult("water", -1 * amount); },
            peg$c151 = function(amount) { return cult("earth", -1 * amount); },
            peg$c152 = function(amount) { return cult("air", -1 * amount); },
            peg$c153 = "transform",
            peg$c154 = { type: "literal", value: "transform", description: "\"transform\"" },
            peg$c155 = function(space, color) { return transform(space, color); },
            peg$c156 = function(space) { return transform(space); },
            peg$c157 = "burn",
            peg$c158 = { type: "literal", value: "burn", description: "\"burn\"" },
            peg$c159 = function(amount) { return burn(amount); },
            peg$c160 = "connect",
            peg$c161 = { type: "literal", value: "connect", description: "\"connect\"" },
            peg$c162 = function(tiles) { return mermaidConnect(tiles); },
            peg$c163 = "bridge",
            peg$c164 = { type: "literal", value: "bridge", description: "\"bridge\"" },
            peg$c165 = ":",
            peg$c166 = { type: "literal", value: ":", description: "\":\"" },
            peg$c167 = function(tile1, tile2, tile3) { return bridge(tile1, tile2, tile3) },
            peg$c168 = function(tile1, tile2) { return bridge(tile1, tile2) },
            peg$c169 = "[opponent accepted power]",
            peg$c170 = { type: "literal", value: "[opponent accepted power]", description: "\"[opponent accepted power]\"" },
            peg$c171 = function() { return leechOption(true); },
            peg$c172 = "[all opponents declined power]",
            peg$c173 = { type: "literal", value: "[all opponents declined power]", description: "\"[all opponents declined power]\"" },
            peg$c174 = function() { return leechOption(false); },
            peg$c175 = "gain p3 for vp",
            peg$c176 = { type: "literal", value: "gain P3 for VP", description: "\"gain P3 for VP\"" },
            peg$c177 = function() { return ssGainPowerToken(true); },
            peg$c178 = "-gain_p3_for_vp",
            peg$c179 = { type: "literal", value: "-GAIN_P3_FOR_VP", description: "\"-GAIN_P3_FOR_VP\"" },
            peg$c180 = function() { return ssGainPowerToken(false); },
            peg$c181 = "unlock-terrain",
            peg$c182 = { type: "literal", value: "unlock-terrain", description: "\"unlock-terrain\"" },
            peg$c183 = "gain-priest",
            peg$c184 = { type: "literal", value: "gain-priest", description: "\"gain-priest\"" },
            peg$c185 = function() { return rwUnlockTerrain("gain-priest"); },
            peg$c186 = function(terrain) { return rwUnlockTerrain(terrain); },
            peg$c187 = "pick-color ",
            peg$c188 = { type: "literal", value: "pick-color ", description: "\"pick-color \"" },
            peg$c189 = function(color) { return pickColor(color); },
            peg$c190 = /^[a-z0-9]/i,
            peg$c191 = { type: "class", value: "[a-z0-9]i", description: "[a-z0-9]i" },
            peg$c192 = function(characters) { return a2s(characters); },
            peg$c193 = /^[a-z0-9\-\/.:]/i,
            peg$c194 = { type: "class", value: "[a-z0-9-/.:]i", description: "[a-z0-9-/.:]i" },
            peg$c195 = /^[0-9]/,
            peg$c196 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c197 = function(digits) { return parseInt(a2s(digits),10); },
            peg$c198 = { type: "other", description: "whitespace" },
            peg$c199 = /^[ \t\n\r]/,
            peg$c200 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },

            peg$currPos          = 0,
            peg$savedPos         = 0,
            peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$result;

        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
          }

          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }

        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }

        function expected(description) {
          throw peg$buildException(
            null,
            [{ type: "other", description: description }],
            input.substring(peg$savedPos, peg$currPos),
            peg$computeLocation(peg$savedPos, peg$currPos)
          );
        }

        function error(message) {
          throw peg$buildException(
            message,
            null,
            input.substring(peg$savedPos, peg$currPos),
            peg$computeLocation(peg$savedPos, peg$currPos)
          );
        }

        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos],
              p, ch;

          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }

            details = peg$posDetailsCache[p];
            details = {
              line:   details.line,
              column: details.column,
              seenCR: details.seenCR
            };

            while (p < pos) {
              ch = input.charAt(p);
              if (ch === "\n") {
                if (!details.seenCR) { details.line++; }
                details.column = 1;
                details.seenCR = false;
              } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                details.line++;
                details.column = 1;
                details.seenCR = true;
              } else {
                details.column++;
                details.seenCR = false;
              }

              p++;
            }

            peg$posDetailsCache[pos] = details;
            return details;
          }
        }

        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos),
              endPosDetails   = peg$computePosDetails(endPos);

          return {
            start: {
              offset: startPos,
              line:   startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line:   endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }

        function peg$fail(expected) {
          if (peg$currPos < peg$maxFailPos) { return; }

          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }

          peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, found, location) {
          function cleanupExpected(expected) {
            var i = 1;

            expected.sort(function(a, b) {
              if (a.description < b.description) {
                return -1;
              } else if (a.description > b.description) {
                return 1;
              } else {
                return 0;
              }
            });

            while (i < expected.length) {
              if (expected[i - 1] === expected[i]) {
                expected.splice(i, 1);
              } else {
                i++;
              }
            }
          }

          function buildMessage(expected, found) {
            function stringEscape(s) {
              function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

              return s
                .replace(/\\/g,   '\\\\')
                .replace(/"/g,    '\\"')
                .replace(/\x08/g, '\\b')
                .replace(/\t/g,   '\\t')
                .replace(/\n/g,   '\\n')
                .replace(/\f/g,   '\\f')
                .replace(/\r/g,   '\\r')
                .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
            }

            var expectedDescs = new Array(expected.length),
                expectedDesc, foundDesc, i;

            for (i = 0; i < expected.length; i++) {
              expectedDescs[i] = expected[i].description;
            }

            expectedDesc = expected.length > 1
              ? expectedDescs.slice(0, -1).join(", ")
                  + " or "
                  + expectedDescs[expected.length - 1]
              : expectedDescs[0];

            foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

            return "Expected " + expectedDesc + " but " + foundDesc + " found.";
          }

          if (expected !== null) {
            cleanupExpected(expected);
          }

          return new peg$SyntaxError(
            message !== null ? message : buildMessage(expected, found),
            expected,
            found,
            location
          );
        }

        function peg$parseTurn() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseAction();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseAction();
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1);
          }
          s0 = s1;

          return s0;
        }

        function peg$parseAction() {
          var s0;

          s0 = peg$parsePriestToCult();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBuild();
            if (s0 === peg$FAILED) {
              s0 = peg$parseUpgrade();
              if (s0 === peg$FAILED) {
                s0 = peg$parsePass();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseOctagonalAction();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseLeech();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseAdvance();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseTransform();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseDone();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseWait();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseFactionSetup();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseGameSetup();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseOptionSetup();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseRoundSetup();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseBonusSetup();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsePlayerSetup();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseAdditionalScoringSetup();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseRoundStart();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseBaseIncome();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseCultIncome();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseEndGamePoints();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseConvert();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseTown();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseFavor();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseDig();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseCult();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseBurn();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseMermaidConnect();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseBridge();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseTransform();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseLeechOption();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseRiverwalkersUnlockTerrain();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseShapeshifterGainPowerToken();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsePickColor();
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }

          return s0;
        }

        function peg$parsePriestToCult() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c1) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c2); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c3) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c4); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c5) {
                    s5 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseString();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsePriestToCultFor();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (s10 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 46) {
                                s11 = peg$c7;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c8); }
                              }
                              if (s11 === peg$FAILED) {
                                s11 = null;
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parse_();
                                if (s12 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c9(s7, s9);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsePriestToCultFor() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c10) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c11); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseNumber();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c12(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c13();
            }
            s0 = s1;
          }

          return s0;
        }

        function peg$parseBuild() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c14) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseString();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s5 = peg$c7;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                  }
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c16(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseUpgrade() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c17) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseString();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c5) {
                    s5 = peg$c5;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseString();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 46) {
                            s9 = peg$c7;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                          }
                          if (s9 === peg$FAILED) {
                            s9 = null;
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c19(s3, s7);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsePass() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c20) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseString();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c22(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c20) {
              s1 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c23();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }

          return s0;
        }

        function peg$parseOctagonalAction() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c24) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseString();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s5 = peg$c7;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                  }
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c26(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseLeech() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c27) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseNumber();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c29) {
                    s5 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c30); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseString();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 46) {
                            s9 = peg$c7;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                          }
                          if (s9 === peg$FAILED) {
                            s9 = null;
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c31(s3, s7);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c32) {
              s1 = input.substr(peg$currPos, 7);
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseNumber();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c29) {
                      s5 = input.substr(peg$currPos, 4);
                      peg$currPos += 4;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c30); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseString();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parse_();
                          if (s8 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 46) {
                              s9 = peg$c7;
                              peg$currPos++;
                            } else {
                              s9 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c8); }
                            }
                            if (s9 === peg$FAILED) {
                              s9 = null;
                            }
                            if (s9 !== peg$FAILED) {
                              s10 = peg$parse_();
                              if (s10 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c34(s3, s7);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c27) {
                s1 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c28); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseNumber();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c35(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c32) {
                  s1 = input.substr(peg$currPos, 7);
                  peg$currPos += 7;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c33); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseNumber();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c36(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }

          return s0;
        }

        function peg$parseAdvance() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c37) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseString();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s5 = peg$c7;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                  }
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c39(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseWait() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c40) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c7;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c42();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseDone() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c43) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c7;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c45();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseFactionSetup() {
          var s0, s1;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c46) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c48();
          }
          s0 = s1;

          return s0;
        }

        function peg$parseGameSetup() {
          var s0, s1, s2;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 20).toLowerCase() === peg$c49) {
            s1 = input.substr(peg$currPos, 20);
            peg$currPos += 20;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c51();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseOptionSetup() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c52) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseOptionString();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c54(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseRoundSetup() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c55) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c56); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseNumber();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 8).toLowerCase() === peg$c57) {
                    s5 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c58); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseString();
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s8 = peg$c59;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c60); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseOptionString();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parse_();
                              if (s11 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c61) {
                                  s12 = peg$c61;
                                  peg$currPos += 2;
                                } else {
                                  s12 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c62); }
                                }
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parse_();
                                  if (s13 !== peg$FAILED) {
                                    s14 = peg$parseNumber();
                                    if (s14 !== peg$FAILED) {
                                      s15 = peg$parse_();
                                      if (s15 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c63(s3, s7, s10, s14);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseBonusSetup() {
          var s0, s1, s2;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 14).toLowerCase() === peg$c64) {
            s1 = input.substr(peg$currPos, 14);
            peg$currPos += 14;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseString();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c66(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsePlayerSetup() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c67) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNumber();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c69) {
                s3 = peg$c69;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseOptionString();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c71(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseAdditionalScoringSetup() {
          var s0, s1, s2;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 26).toLowerCase() === peg$c72) {
            s1 = input.substr(peg$currPos, 26);
            peg$currPos += 26;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c73); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseOptionString();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c74(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseRoundStart() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c75) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c76); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNumber();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c77) {
                s3 = input.substr(peg$currPos, 7);
                peg$currPos += 7;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c78); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c79(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseBaseIncome() {
          var s0, s1, s2;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 24) === peg$c80) {
            s1 = peg$c80;
            peg$currPos += 24;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c81); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c82();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseCultIncome() {
          var s0, s1, s2;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 23) === peg$c83) {
            s1 = peg$c83;
            peg$currPos += 23;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c85();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseEndGamePoints() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 43) {
            s1 = peg$c86;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c87); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNumber();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c88) {
                s3 = peg$c88;
                peg$currPos += 7;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c89); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseOptionString();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c90(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 15) === peg$c91) {
              s1 = peg$c91;
              peg$currPos += 15;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c92); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c93();
            }
            s0 = s1;
          }

          return s0;
        }

        function peg$parseConvert() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c94) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseResourceAmount();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c5) {
                    s5 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseResourceAmount();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 46) {
                            s9 = peg$c7;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                          }
                          if (s9 === peg$FAILED) {
                            s9 = null;
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c96(s3, s7);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseResourceAmount() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = peg$parseNumber();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseString();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c97(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseString();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c98(s1);
            }
            s0 = s1;
          }

          return s0;
        }

        function peg$parseTown() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c99) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c100); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNumber();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c7;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c101(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            if (input.charCodeAt(peg$currPos) === 43) {
              s2 = peg$c86;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c87); }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (input.charCodeAt(peg$currPos) === 43) {
                  s2 = peg$c86;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c87); }
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseNumber();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseNumber();
                }
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c102) {
                  s4 = input.substr(peg$currPos, 2);
                  peg$currPos += 2;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
                if (s4 !== peg$FAILED) {
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c102) {
                      s4 = input.substr(peg$currPos, 2);
                      peg$currPos += 2;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c103); }
                    }
                  }
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseNumber();
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s5 = peg$c7;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c8); }
                    }
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c104(s2, s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }

          return s0;
        }

        function peg$parseFavor() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c105) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c106); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseNumber();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c7;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c107(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseDig() {
          var s0, s1, s2, s3, s4, s5;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c108) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c109); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseNumber();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s4 = peg$c7;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c110(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseCult() {
          var s0, s1, s2, s3, s4, s5;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c111) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s2 = peg$c7;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c113();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c114) {
              s1 = input.substr(peg$currPos, 6);
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c115); }
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c7;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c116();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c117) {
                s1 = input.substr(peg$currPos, 6);
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c118); }
              }
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s2 = peg$c7;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c119();
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c120) {
                  s1 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c121); }
                }
                if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s2 = peg$c7;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                  }
                  if (s2 === peg$FAILED) {
                    s2 = null;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c122();
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 43) {
                    s1 = peg$c86;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c87); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseNumber();
                    if (s2 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c123) {
                        s3 = input.substr(peg$currPos, 4);
                        peg$currPos += 4;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c124); }
                      }
                      if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                          s4 = peg$c7;
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c8); }
                        }
                        if (s4 === peg$FAILED) {
                          s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parse_();
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c125(s2);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 43) {
                      s1 = peg$c86;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c87); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseNumber();
                      if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c126) {
                          s3 = input.substr(peg$currPos, 5);
                          peg$currPos += 5;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c127); }
                        }
                        if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 46) {
                            s4 = peg$c7;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                          }
                          if (s4 === peg$FAILED) {
                            s4 = null;
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c128(s2);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 43) {
                        s1 = peg$c86;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c87); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseNumber();
                        if (s2 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c129) {
                            s3 = input.substr(peg$currPos, 5);
                            peg$currPos += 5;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c130); }
                          }
                          if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 46) {
                              s4 = peg$c7;
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c8); }
                            }
                            if (s4 === peg$FAILED) {
                              s4 = null;
                            }
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parse_();
                              if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c131(s2);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 43) {
                          s1 = peg$c86;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c87); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseNumber();
                          if (s2 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c132) {
                              s3 = input.substr(peg$currPos, 3);
                              peg$currPos += 3;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c133); }
                            }
                            if (s3 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 46) {
                                s4 = peg$c7;
                                peg$currPos++;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c8); }
                              }
                              if (s4 === peg$FAILED) {
                                s4 = null;
                              }
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c134(s2);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c135) {
                            s1 = input.substr(peg$currPos, 5);
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c136); }
                          }
                          if (s1 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 46) {
                              s2 = peg$c7;
                              peg$currPos++;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c8); }
                            }
                            if (s2 === peg$FAILED) {
                              s2 = null;
                            }
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parse_();
                              if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c137();
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c138) {
                              s1 = input.substr(peg$currPos, 6);
                              peg$currPos += 6;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c139); }
                            }
                            if (s1 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 46) {
                                s2 = peg$c7;
                                peg$currPos++;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c8); }
                              }
                              if (s2 === peg$FAILED) {
                                s2 = null;
                              }
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parse_();
                                if (s3 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c140();
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c141) {
                                s1 = input.substr(peg$currPos, 6);
                                peg$currPos += 6;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c142); }
                              }
                              if (s1 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 46) {
                                  s2 = peg$c7;
                                  peg$currPos++;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = null;
                                }
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parse_();
                                  if (s3 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c143();
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c144) {
                                  s1 = input.substr(peg$currPos, 4);
                                  peg$currPos += 4;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                }
                                if (s1 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 46) {
                                    s2 = peg$c7;
                                    peg$currPos++;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = null;
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parse_();
                                    if (s3 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c146();
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 45) {
                                    s1 = peg$c147;
                                    peg$currPos++;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseNumber();
                                    if (s2 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c123) {
                                        s3 = input.substr(peg$currPos, 4);
                                        peg$currPos += 4;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c124); }
                                      }
                                      if (s3 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 46) {
                                          s4 = peg$c7;
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                        }
                                        if (s4 === peg$FAILED) {
                                          s4 = null;
                                        }
                                        if (s4 !== peg$FAILED) {
                                          s5 = peg$parse_();
                                          if (s5 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c149(s2);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 45) {
                                      s1 = peg$c147;
                                      peg$currPos++;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseNumber();
                                      if (s2 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c126) {
                                          s3 = input.substr(peg$currPos, 5);
                                          peg$currPos += 5;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c127); }
                                        }
                                        if (s3 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 46) {
                                            s4 = peg$c7;
                                            peg$currPos++;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                          }
                                          if (s4 === peg$FAILED) {
                                            s4 = null;
                                          }
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parse_();
                                            if (s5 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$c150(s2);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 45) {
                                        s1 = peg$c147;
                                        peg$currPos++;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parseNumber();
                                        if (s2 !== peg$FAILED) {
                                          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c129) {
                                            s3 = input.substr(peg$currPos, 5);
                                            peg$currPos += 5;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c130); }
                                          }
                                          if (s3 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 46) {
                                              s4 = peg$c7;
                                              peg$currPos++;
                                            } else {
                                              s4 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                            }
                                            if (s4 === peg$FAILED) {
                                              s4 = null;
                                            }
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parse_();
                                              if (s5 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c151(s2);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 45) {
                                          s1 = peg$c147;
                                          peg$currPos++;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parseNumber();
                                          if (s2 !== peg$FAILED) {
                                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c132) {
                                              s3 = input.substr(peg$currPos, 3);
                                              peg$currPos += 3;
                                            } else {
                                              s3 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                            }
                                            if (s3 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 46) {
                                                s4 = peg$c7;
                                                peg$currPos++;
                                              } else {
                                                s4 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                              }
                                              if (s4 === peg$FAILED) {
                                                s4 = null;
                                              }
                                              if (s4 !== peg$FAILED) {
                                                s5 = peg$parse_();
                                                if (s5 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c152(s2);
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }

          return s0;
        }

        function peg$parseTransform() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c153) {
            s1 = input.substr(peg$currPos, 9);
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c154); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseString();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c5) {
                    s5 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseString();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 46) {
                            s9 = peg$c7;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                          }
                          if (s9 === peg$FAILED) {
                            s9 = null;
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c155(s3, s7);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c153) {
              s1 = input.substr(peg$currPos, 9);
              peg$currPos += 9;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c154); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseString();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s5 = peg$c7;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c8); }
                    }
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c156(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }

          return s0;
        }

        function peg$parseBurn() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c157) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c158); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseNumber();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s5 = peg$c7;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                  }
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c159(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseMermaidConnect() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c160) {
            s1 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c161); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseOptionString();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s5 = peg$c7;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                  }
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c162(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseBridge() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c163) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c164); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseString();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s4 = peg$c165;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c166); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseString();
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s6 = peg$c165;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c166); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseString();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 46) {
                            s9 = peg$c7;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                          }
                          if (s9 === peg$FAILED) {
                            s9 = null;
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c167(s3, s5, s7);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c163) {
              s1 = input.substr(peg$currPos, 6);
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c164); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseString();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s4 = peg$c165;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c166); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseString();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                          s7 = peg$c7;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c8); }
                        }
                        if (s7 === peg$FAILED) {
                          s7 = null;
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parse_();
                          if (s8 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c168(s3, s5);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }

          return s0;
        }

        function peg$parseLeechOption() {
          var s0, s1;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 25).toLowerCase() === peg$c169) {
            s1 = input.substr(peg$currPos, 25);
            peg$currPos += 25;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c170); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c171();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 30).toLowerCase() === peg$c172) {
              s1 = input.substr(peg$currPos, 30);
              peg$currPos += 30;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c173); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c174();
            }
            s0 = s1;
          }

          return s0;
        }

        function peg$parseShapeshifterGainPowerToken() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 14).toLowerCase() === peg$c175) {
            s1 = input.substr(peg$currPos, 14);
            peg$currPos += 14;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c176); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c7;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c177();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 15).toLowerCase() === peg$c178) {
              s1 = input.substr(peg$currPos, 15);
              peg$currPos += 15;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c179); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s3 = peg$c7;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c180();
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }

          return s0;
        }

        function peg$parseRiverwalkersUnlockTerrain() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 14).toLowerCase() === peg$c181) {
            s1 = input.substr(peg$currPos, 14);
            peg$currPos += 14;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c182); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 11).toLowerCase() === peg$c183) {
                s3 = input.substr(peg$currPos, 11);
                peg$currPos += 11;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c184); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s5 = peg$c7;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                  }
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c185();
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 14).toLowerCase() === peg$c181) {
              s1 = input.substr(peg$currPos, 14);
              peg$currPos += 14;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c182); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseString();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s5 = peg$c7;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c8); }
                    }
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c186(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }

          return s0;
        }

        function peg$parsePickColor() {
          var s0, s1, s2, s3, s4, s5;

          s0 = peg$currPos;
          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c187) {
            s1 = input.substr(peg$currPos, 11);
            peg$currPos += 11;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c188); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseString();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s4 = peg$c7;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c189(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseString() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = [];
          if (peg$c190.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c191); }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c190.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c191); }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c192(s1);
          }
          s0 = s1;

          return s0;
        }

        function peg$parseOptionString() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = [];
          if (peg$c193.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c194); }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c193.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c194); }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c192(s1);
          }
          s0 = s1;

          return s0;
        }

        function peg$parseNumber() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = [];
          if (peg$c195.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c196); }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c195.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c196); }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c197(s1);
          }
          s0 = s1;

          return s0;
        }

        function peg$parse_() {
          var s0, s1;

          peg$silentFails++;
          s0 = [];
          if (peg$c199.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c200); }
          }
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c199.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c200); }
            }
          }
          peg$silentFails--;
          if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c198); }
          }

          return s0;
        }


          function a2s(a) { 
            return a.join("");
          }

          function pass(bonus) { 
            return { pass:bonus };
          }

          function priestToCult(cult, amount) { 
            if(amount < 0 || amount > 3) {
              return "[failure] can only send a priest for 1, 2, or 3"
            }

            if(cult.toUpperCase() == "FIRE") {
              return { fire: amount };
            }
            if(cult.toUpperCase() == "WATER") {
              return { water: amount };
            }
            if(cult.toUpperCase() == "EARTH") {
              return { earth: amount };
            }
            if(cult.toUpperCase() == "AIR") {
              return { air: amount };
            }

            return "[failure]: " + cult + " is not recognized";
          }

          function build(space) {
            return { d: space };
          }

          function upgrade(building, space) {
            if(building.toUpperCase() == "SH") { 
              return { sh: space }
            }
            if(building.toUpperCase() == "TE") { 
              return { te: space }
            }
            if(building.toUpperCase() == "TP") { 
              return { tp: space }
            }
            if(building.toUpperCase() == "SA") { 
              return { sa: space }
            }

            return "[failure]: " + building + " is not recognized";
          }

          function r2s(res) { 
            if(res.pw !== undefined) { 
              return res.pw + "pw";
            }
            if(res.c !== undefined) { 
              return res.c + "c";
            }
            if(res.w !== undefined) { 
              return res.w + "w";
            }
            if(res.vp !== undefined) { 
              return res.vp + "vp";
            }

            return "[failure] could not find a valid resource";
          }

          function convert(from, to) {
            var conv = {};

            if(from.pw !== undefined) { 
              conv.pw = -from.pw;
            }
            if(from.c !== undefined) { 
              conv.c = -from.c;
            }
            if(from.w !== undefined) { 
              conv.w = -from.w;
            }
            if(from.p !== undefined) { 
              conv.p = -from.p;
            }
            if(from.vp !== undefined) { 
              conv.vp = -from.vp;
            }

            if(to.pw !== undefined) { 
              conv.pw = to.pw;
            }
            if(to.c !== undefined) { 
              conv.c = to.c;
            }
            if(to.w !== undefined) { 
              conv.w = to.w;
            }
            if(to.p !== undefined) { 
              conv.p = to.p;
            }
            if(to.vp !== undefined) { 
              conv.vp = to.vp;
            }

            return conv;
          }

          function resource(res, quantity) { 
            if(quantity < 0) { 
              return "[failure] quantity must be > 0";
            }

            if(res.toUpperCase() == "PW") { 
              return { pw: quantity };
            }
            if(res.toUpperCase() == "W") { 
              return { w: quantity };
            }
            if(res.toUpperCase() == "C") { 
              return { c: quantity };
            }
            if(res.toUpperCase() == "P") { 
              return { p: quantity };
            }
            if(res.toUpperCase() == "VP") { 
              return { vp: quantity };
            }

            return "[failure] " + res + " is not recognized";
          }

          function town(num, count) { 
            if(num == 7) {
              return { tw: 7, advanceShip: 1, townCount: count }
            }
            return { tw: num, townCount: count };
          }

          function favor(num) { 
            return { fav: num };
          }
          
          function leechOption(accepted) { 
            return { leechAccepted: accepted };
          }
          
          function rwUnlockTerrain(terrain) { 
            return { unlockTerrain: terrain };
          }
          
          function ssGainPowerToken(accepted) { 
            return { gainPowerToken: accepted }
          }

          function action(act) { 
            var result = { action: act };

            if(act.toUpperCase() == "ACT1") { 
              // do what?
            }
            if(act.toUpperCase() == "ACT2") { 
              result.p = 1;
            }
            if(act.toUpperCase() == "ACT3") { 
              result.w = 2;
            }
            if(act.toUpperCase() == "ACT4") { 
              result.c = 7;
            }
            if(act.toUpperCase() == "ACT5") { 
              result.spd = 1;
            }
            if(act.toUpperCase() == "ACT6") { 
              result.spd = 2;
            }
            
            if(act.toUpperCase() == "BON1") { 
              result.spd = 1;
            }
            
            if(act.toUpperCase() == "ACTG") { 
              result.spd = 2;
            }

            return result;
          }

          function transform(space, color) { 
            return { transform: { space: space, color: color } }
          }

          function burn(amount) { 
            return { burn: amount }
          }

          function mermaidConnect(tiles) { 
            return { mermaidConnect: tiles }
          }

          function leech(accept, amount, faction) { 
            return { leech: { accept: accept, amount: amount, faction: faction } };
          }

          function dig(amount) { 
            return { dig: amount, spd: amount }
          }

          function advance(track) { 
            if(track.toUpperCase() == "SHIP") { 
              return { advanceShip: 1 };
            }
            else if(track.toUpperCase() == "DIG") { 
              return { advanceDig: 1 };
            }
          }
          
          function cult(cult, amount) { 
            if(cult.toUpperCase() == "FIRE") {
              return { fire: amount };
            }
            if(cult.toUpperCase() == "WATER") {
              return { water: amount };
            }
            if(cult.toUpperCase() == "EARTH") {
              return { earth: amount };
            }
            if(cult.toUpperCase() == "AIR") {
              return { air: amount };
            }
          }

          function wait() { 
            return { wait:"wait" };
          }

          function done() { 
            return { done: "done" };
          }

          function factionSetup() { 
              return { setup: { factionSelection: true } };
          }

          function gameStart() { 
            return { setup: { gameStart: true } };
          }

          function optionSetup(option) { 
            return { setup: { option: option } };
          }
          
          function endGamePoints(source, points) { 
            return { endGame: { source: source, points: points } };
          }
          
          function bridge(tile1, tile2, tile3) { 
            var tiles = [tile1, tile2];
            if(tile3 != undefined) { 
              tiles.push(tile3);
            }
            return { bridge: tiles };
          }

          function roundSetup(roundNum, roundTile, goal, points) { 
            return { 
              setup: { 
                round: roundNum, 
                tile: roundTile, 
                goal: goal, 
                points: points 
              } 
            };
          }

          function bonusSetup(bonusTile) { 
            return { setup: { bonus: bonusTile } };
          }

          function playerSetup(playerName, playerNum) { 
            return { setup: { player: { num: playerNum, name: playerName } } };
          } 

          function additionalScoringSetup(scoringTile) { 
            return { setup: { additionalScoring: scoringTile } };
          }

          function roundStart(roundNum) { 
            return { round: roundNum };
          }

          function income(incomeType) { 
            return { income: incomeType };
          }
          
          function pickColor(color) { 
            return { pickColor: color };
          }

          function processActions(result, actions) { 
            for(var i = 0; i < actions.length; i++) {
              var a = actions[i];
              processAction(result, a);
            }
          }

          function processAction(result, action) { 
            
            // sub or main action effects
            if(action.pw != undefined) { 
              if(result.pw == undefined) { 
                result.pw = 0;
              }
              result.pw += action.pw;
            }
            if(action.c != undefined) { 
              if(result.c == undefined) { 
                result.c = 0;
              }
              result.c += action.c;
            }
            if(action.w != undefined) { 
              if(result.w == undefined) { 
                result.w = 0;
              }
              result.w += action.w;
            }
            if(action.p != undefined) { 
              if(result.p == undefined) { 
                result.p = 0;
              }
              result.p += action.p;
            }
            if(action.vp != undefined) { 
              if(result.vp == undefined) { 
                result.vp = 0;
              }
              result.vp += action.vp;
            }
            if(action.spd != undefined) { 
              if(result.spd == undefined) { 
                result.spd = 0;
              }
              result.spd += action.spd;
            }
            if(action.dig != undefined) { 
              if(result.dig == undefined) { 
                result.dig = 0;
              }
              result.dig += action.dig;
            }
            if(action.fire != undefined) { 
              if(result.fire == undefined) { 
                result.fire = 0;
              }
              result.fire += action.fire;
            }
            if(action.water != undefined) { 
              if(result.water == undefined) { 
                result.water = 0;
              }
              result.water += action.water;
            }
            if(action.earth != undefined) { 
              if(result.earth == undefined) { 
                result.earth = 0;
              }
              result.earth += action.earth ;
            }
            if(action.air != undefined) { 
              if(result.air == undefined) { 
                result.air = 0;
              }
              result.air += action.air ;
            }
            if(action.tw !== undefined) { 
              if(result.tw == undefined) { 
                result.tw = [];
              }
              for(var i = 0; i < action.townCount; i++) {
                result.tw.push(action.tw);
              }
            }
            if(action.fav != undefined) { 
              if(result.fav == undefined) { 
                result.fav = [];
              }
              result.fav.push(action.fav);
            }
            if(action.transform != undefined) { 
              if(result.transform == undefined) { 
                result.transform = [];
              }
              result.transform.push(action.transform);
            }
            if(action.burn !== undefined) { 
              if(result.burn == undefined) { 
                result.burn = 0;
              }
              result.burn += action.burn;
            }
            if(action.mermaidConnect != undefined) { 
              result.mermaidConnect = action.mermaidConnect;
            }
            if(action.bridge != undefined) { 
              result.bridge = action.bridge;
            }


            if(action.action != undefined) { 
              result.action = action.action;
            }
            if(action.d != undefined) { 
              if(result.d == undefined) { 
                result.d = [];
              }
              result.d.push(action.d);
            }
            if(action.tp != undefined) { 
              if(result.tp == undefined) { 
                result.tp = [];
              }
              result.tp.push(action.tp);
            }
            if(action.te != undefined) { 
              if(result.te == undefined) { 
                result.te = [];
              }
              result.te.push(action.te);
            }
            if(action.sh != undefined) { 
              if(result.sh == undefined) { 
                result.sh = 0;
              }
              result.sh = action.sh;
            }
            if(action.sa != undefined) { 
              if(result.sa == undefined) { 
                result.sa = 0;
              }
              result.sa = action.sa;
            }
            if(action.leech !== undefined) { 
              result.leech = action.leech;
            }
            if(action.advanceShip !== undefined) { 
              if(result.advanceShip == undefined) { 
                result.advanceShip = 0;
              }
              result.advanceShip += action.advanceShip;
            }
            if(action.advanceDig !== undefined) { 
              if(result.advanceDig == undefined) { 
                result.advanceDig = 0;
              }
              result.advanceDig += action.advanceDig;
            }
            if(action.done != undefined) { 
              result.done = action.done;
            }
            if(action.wait != undefined) { 
              result.wait = action.wait;
            }
            if(action.setup != undefined) { 
              result.setup = action.setup;
            }    
            if(action.pass) { 
              result.pass = action.pass;
            }
            // build/upgrade
            if(action.space) { 
              result.space = action.space;
            }
            if(action.round) { 
              result.round = action.round; 
            }
            if(action.income) { 
              result.income = action.income; 
            }
            
            if(action.endGame) { 
              result.endGame = action.endGame;
            }
            
            if(action.leechAccepted != undefined) { 
              result.leechAccepted = action.leechAccepted;
            }
            
            if(action.unlockTerrain != undefined) { 
              result.unlockTerrain = action.unlockTerrain;
            }
            
            if(action.gainPowerToken != undefined) { 
              result.gainPowerToken = action.gainPowerToken;
            }
            
            if(action.pickColor != undefined) { 
              result.pickColor = action.pickColor;
            }
          }

          function makeAction(actions) {
            var result = {};    
            processActions(result, actions);
            return result;
          }


        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail({ type: "end", description: "end of input" });
          }

          throw peg$buildException(
            null,
            peg$maxFailExpected,
            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
            peg$maxFailPos < input.length
              ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
              : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
          );
        }
      }

      return {
        SyntaxError: peg$SyntaxError,
        parse:       peg$parse
      };
    };
    /// END GENERATED BY PEGJS
}]);

